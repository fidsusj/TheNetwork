#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let http = require('http');
let debug = require('debug')('the-network:server');

/**
 * Class dependencies.
 */

let Database = require('../classes/Database.js');
let Parser = require('../classes/XmlJsonParser.js');

/**
 * Setting up server
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let server = http.createServer(app);
console.log('HTTP Server started.');

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Connect to database
 */

Database.getInstance().establishConnection(function () {
    // connected to database
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);

    console.log('Server is listening on port ' + port + '.');
}

/**
 * adds a time stamp to all console outputs
 */
(function (o) {
    if (o.__ts__) {
        return;
    }
    let slice = Array.prototype.slice;
    ['log', 'debug', 'info', 'warn', 'error'].forEach(function (f) {
        let _ = o[f];
        o[f] = function () {
            let args = slice.call(arguments);
            args.unshift(new Date().toISOString());
            return _.apply(o, args);
        };
    });
    o.__ts__ = true;
})(console);